#+TITLE: Junk Food Of Programming
#+AUTHOR: <lngnmn2@yahoo.com>
#+STARTUP: indent fold overview

Recently I have been watching lots of cooking videos, mostly Chinese and Indian.

I have noticed that the taste of the most Chinese foods would be the same -- burned oil, over-heated, over-saturated fats and excess of dried red chilliest, which makes a mouth numb. (This is OK, it is how to serve a rotten produce using a wood-burning stoves.)

I didn't realize until much later what is the common principle behind all these videos -- /they do no understand food/ (how excessive heat breaks pieces of /aminoacids/, which we need to ingest into a molecular pulp, how "flavor" molecules are "big" and fragile -- almost as those of a "fragrance" -- so they should be added /last/, etc), they never tried to and they /do not want to understand/.

They are even proud of it -- they follow the memorized and "perfected" by endless repetitions fixed procedure, never asking any "whys", and they consider themselves as real "masters" (or professionals).

Indian foods are better, because the literal /heaps of different spices/ they throw into a pan are actual sundried and grinded seeds, so they are good (even necessary) for a proper digestion.

So, just following a fixed procedure without any understanding. I have seen this before.

There was a famous (at the time) text called

[[https://www.datapacrat.com/Opinion/Reciprocality/r0/index.html][The Programmer's Stone]]

Back then I was much impressed with it, nowadays I realize that it was a low-effort piece, written in a rush. The wording and metaphors can be way better and more accurate to reflect the actual mental states. "Mapping" means almost nothing.

The proper metaphors are "an army grounds" vs. "a philosophy (or math) department".

The later /begin with a proper understanding (and cannot proceed without it)/, with the former begin with a fixed procedure (and cannot proceed without it).

Now everything "clicks". There are "coders", who are proud of themselves for never bothering with understanding and with these crappy theories (yes, most of too abstract theories are an abstract terminology joggling crap, indeed).

They follow "better" "agile" procedures and use a lot of "tools of the trade", like these memory leak detectors. They are all consider themselves as real masters (or professionals).

It is them, who usually advocate that a /top-down design beforehand/, is an unnecessary waste of time, and that [their] code is the only thing that matters.

There are also "programmers". Most of actually good programmers (with notable exception of Carmack) are /math majors/. For them /understanding is what they do for a living/. (There are also idiots -- a vast majority -- who treat /math/ as a set of fixed procedures).

They know that the code is the last and less important part, and that a proper understanding and decomposition of a problem [domain] into meaningful abstractions (which has be into an one-to-one correspondence to the actual aspects of /What Is/) and to define corresponding clear, non-leaking abstraction barriers, is what programming is about.

One more time -- the adequacy of a decomposition of the problem domain and proper mapping of the concepts (abstractions) into [Abstract] Algebraic Types and Abstract Interfaces (into modules) is what determines a quality (and success) of a program.

There is no substitute for a proper understanding.

The second crucial part is to choice just right data-structures to represent these /adequately captured/ abstractions, and the program "almost writes itself" (the shape of the data determines the shape of the code -- notably recursion).

Unsurprisingly, mathematically mature people and analytical minds in general tends to use "mostly functional languages", based on /their right understanding/.

This is because mathematics itself is a set of "types" and corrresponding notations, and that the most of the concepts of abstract algebra and of the set theory are /technically/ defined as "Abstract Data Types". Yes, just go and check yourself.

Last but not least, it is *this*, that was behind the enormous "success" of the Bell Labs (and its uniqueness in general). A bunch of /math literate/ guys were stationed together in a quiet, friendly environment (separated from idiots) and asked (among other things) to write [telecommunication] software.

These guys /started with a proper understanding/, and then everything just naturally followed.

Nowadays we are downing in a junk-food software, "languages" and "frameworks".

Almost everything in serious programming has been solved by the late 90s. The /type-classes/ of Haskell and the /lifetimes/ (and /traits/) or Rust are the only major fundamental innovations since then.
